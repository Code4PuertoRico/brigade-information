#!/usr/bin/env python
# usage:
#   bin/merge-from-salesforce [salesforce report csv] [organizations.json]
#
# where salesforce report CSV is downloaded from:
# https://na52.lightning.force.com/one/one.app#/sObject/00O0W000005bkqeUAA/view
from geopy import geocoders


import csv
import json
import re
import sys
from collections import OrderedDict


# Do a HTTP/HTTPS-insensitive comparison for determining if two URLs are
# identical.
def are_urls_equal(url, other):
    return re.sub(r'^https?://', '', url) == re.sub(r'^https?://', '', other)


def is_official_brigade(brigade):
    return 'tags' in brigade and \
            'Brigade' in brigade['tags'] and \
            'Official' in brigade['tags']


def load_organizations(filename):
    with open(filename) as f:
        contents = json.load(f, object_pairs_hook=OrderedDict)
        return contents


def dump_organizations(organizations, filename):
    output = json.dumps(organizations, indent=4, ensure_ascii=False)
    output = re.sub(r'[\s]+$', '', output, flags=re.MULTILINE)

    with open(filename, 'wb') as f:
        f.write(output.encode('utf8'))


def load_report(filename):
    with open(filename) as f:
        # _ = f.readline() # "Last Updated" row

        reader = csv.DictReader(f)
        return [row for row in reader]


def find_newly_official_brigades(existing, salesforce):
    ''' finds brigades that exist in brigade-information but need to be marked official '''
    not_official = filter(lambda b: not is_official_brigade(b), existing)
    official_names = map(lambda b: b['Account Name'], salesforce)
    newly_official_brigades = filter(lambda b: b['name'] in official_names, not_official)
    return newly_official_brigades


def find_missing_brigades(existing, salesforce):
    ''' finds brigades which are in salesforce, but not brigade-information '''
    official_names = map(lambda b: b['name'], existing)
    missing = filter(lambda b: b['Account Name'] not in official_names, salesforce)
    return missing


def find_extra_brigades(existing, salesforce):
    ''' finds brigades which are in brigade-information, but not salesforce '''
    official = filter(is_official_brigade, existing)
    salesforce_names = map(lambda b: b['Account Name'], salesforce)
    extra = filter(lambda b: b['name'] not in salesforce_names, official)
    return extra


def find_renamed_brigades(missing_brigades, extra_brigades):
    ''' finds renamed brigades, the old name will appear as extra and the new name as missing '''
    # dict of { "website" => [old name, new name] }
    matches_by_website = { missing['Website']: [
        missing['Account Name'],
        next(iter([extra['name'] for extra in extra_brigades if are_urls_equal(extra['website'], missing['Website'])]), None)] for missing in missing_brigades
    }
    matches_by_meetup = { missing['MeetUp Link']: [
        missing['Account Name'],
        next(iter([extra['name'] for extra in extra_brigades if are_urls_equal(extra['events_url'], missing['MeetUp Link'])]), None)] for missing in missing_brigades
    }
    matches_by_github = { missing['Github URL']: [
        missing['Account Name'],
        next(iter([extra['name'] for extra in extra_brigades if are_urls_equal(extra['projects_list_url'], missing['Github URL'])]), None)] for missing in missing_brigades
    }

    # mapping of old name to new name
    renamed_brigades = set()
    for (_, (new_brigade_name, old_brigade_name)) in matches_by_website.items():
        if new_brigade_name and old_brigade_name:
            renamed_brigades.add((old_brigade_name, new_brigade_name))

    return list(renamed_brigades)

def remove_brigade(brigade_name, existing, full_removal=False):
    try:
        remove_idx = next(i for i, b in enumerate(existing) if brigade_name == b['name'])

        if full_removal:
            del existing[remove_idx]
        else:
            existing[remove_idx]['tags'].remove('Official')
            existing[remove_idx]['tags'].remove('Code for America')
            existing[remove_idx]['type'] = ", ".join(existing[remove_idx]['tags'])
    except StopIteration:
        print "Could not remove brigade {}".format(brigade_name)

def add_brigade(existing, name=None, events_url=None, city=None, website=None, projects_list_url=None, facebook=None, twitter=None, previous_names=[]):
    # attempt to add the brigade in a place where it is sorted lexicographically
    next_idx = next(i for i, b in enumerate(existing) if name < b['name'])

    latitude = None
    longitude = None

    if city:
        geo = geocoders.Nominatim()
        result = geo.geocode(city)
        latitude = str(result.latitude)
        longitude = str(result.longitude)

    social_profiles = {}
    if facebook:
        social_profiles['facebook'] = facebook
    if twitter:
        social_profiles['twitter'] = twitter

    existing.insert(next_idx, OrderedDict([
        ('name', name),
        ('website', website),
        ('city', city),
        ('latitude', latitude),
        ('longitude', longitude),
        ('events_url', events_url),
        ('previous_names', previous_names),
        ('projects_list_url', projects_list_url),
        ('tags', ['Official', 'Brigade', 'Code for America']),
        ('social_profiles', social_profiles),
    ]))

def rename_brigade(old_brigade_name, new_brigade_name, existing, salesforce):
    old_brigade = next(iter(filter(lambda b: b['name'] == old_brigade_name, existing)), None)
    new_brigade = next(iter(filter(lambda b: b['Account Name'] == new_brigade_name, salesforce)), None)
    previous_names = old_brigade.get('previous_names', [])
    previous_names.append(old_brigade_name)

    remove_brigade(old_brigade_name, existing, full_removal=True)
    add_brigade(existing, name=new_brigade['Account Name'],
            events_url=new_brigade['MeetUp Link'],
            city=new_brigade['Brigade Location'],
            website=new_brigade['Website'],
            twitter=new_brigade['Organization Twitter'],
            facebook=new_brigade['Facebook Page URL'],
            projects_list_url=new_brigade['Github URL'],
            previous_names=previous_names)

def mark_brigade_official(brigade_name, existing):
    brigade_idx = next(i for i, b in enumerate(existing) if brigade_name == b['name'])
    existing[brigade_idx]['tags'].append('Official')
    existing[brigade_idx]['tags'].append('Code for America')
    existing[brigade_idx]['type'] = ", ".join(existing[brigade_idx]['tags'])
    assert is_official_brigade(existing[brigade_idx])


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print "Usage: bin/merge-from-salesforce [salesforce report csv] [organizations.json]"
        sys.exit(1)

    salesforce_path = sys.argv[1]
    organizations_json_path = sys.argv[2]

    existing = load_organizations(organizations_json_path)
    salesforce = load_report(salesforce_path)

    print "Newly Official Brigades:"
    for newly_official_brigade in find_newly_official_brigades(existing, salesforce):
        print newly_official_brigade['name']
        mark_brigade_official(newly_official_brigade['name'], existing)

    # Find possibly-missing and possibly-extra brigades, since typically a
    # Brigade rename will appear as a deletion and addition.
    missing_brigades = find_missing_brigades(existing, salesforce)
    extra_brigades = find_extra_brigades(existing, salesforce)

    print ""
    print "Renamed Brigades:"
    for (old_brigade_name, new_brigade_name) in find_renamed_brigades(missing_brigades, extra_brigades):
        print "{} -> {}".format(old_brigade_name, new_brigade_name)
        rename_brigade(old_brigade_name, new_brigade_name, existing, salesforce)
        del missing_brigades[next(i for i, b in enumerate(missing_brigades) if new_brigade_name == b['Account Name'])]
        del extra_brigades[next(i for i, b in enumerate(extra_brigades) if old_brigade_name == b['name'])]

    print ""
    print "Missing Brigades (from JSON):"
    for missing_brigade in missing_brigades:
        print missing_brigade['name']
        add_brigade(existing, name=missing_brigade['Account Name'],
                events_url=missing_brigade['MeetUp Link'],
                city=missing_brigade['Brigade Location'],
                website=missing_brigade['Website'],
                twitter=missing_brigade['Organization Twitter'],
                facebook=missing_brigade['Facebook Page URL'],
                projects_list_url=missing_brigade['Github URL'])

    print ''
    print "Extra Brigades (in JSON):"
    for extra_brigade in extra_brigades:
        print extra_brigade
        remove_brigade(extra_brigade['name'], existing)

    dump_organizations(existing, organizations_json_path)
